/**************************************************
* 정렬 - ORDER BY
* SELECT 열명 FROM 테이블명 WHERE 조건식 ORDER BY 열명
**************************************************/

/**************************************************
* ORDER BY로 검색 결과 정렬하기
* 검색 조건이 있을때
* SELECT 열명 FROM 테이블명 WHERE 조건식 ORDER BY 열명
* 검색 조건이 없을때
* SELECT 열명 FROM 테이블명 ORDER BY 열명
**************************************************/
/**************************************************
* age 열로 정렬하기
**************************************************/
SELECT * FROM sample31 ORDER BY age;

/**************************************************
* adress 열로 정렬하기
**************************************************/
SELECT * FROM sample31 ORDER BY adress;

/**************************************************
* ORDER BY DESC로 내림차순으로 정렬하기
* 내림차순으로 정렬
* SELECT * FROM 테이블명 ORDER BY 열명 DESC
* ASC  : 오름차순
* DESC : 내림차순
**************************************************/
SELECT * FROM sample31 ORDER BY age (ASC/DESC);

/**************************************************
* 대소관계
* 문자열형 데이터의 대소관계는 사전식 순서에 의해 결정된다
* '1'과 1이 문자열형에 들어있을경우
* 사전식 순서로 정렬이 되기때문에 결과가 다르게 나올수있다
* 1 2 10 20 이 있을경우
* 1 2 10 20(수치형) <-> 1 10 2 20(문자열형)
**************************************************/

/**************************************************
* ORDER BY는 테이블에 영향을 주지 않는다.
* 서버의 데이터를 보여주는 부분에서만 작동한다
**************************************************/

/**************************************************
* 복수의 열을 지정해 정렬하기
* ORDER BY 구
* SELECT 열명 FROM 테이블명 WHERE 조건식
  ORDER BY 열명1[ASC|DESC], 열명2[ASC|DESC]
**************************************************/

/**************************************************
* 복수 열로 정렬 지정
* ORDER BY 구에 복수의 열을 지정할 수 있다.
**************************************************/
SELECT * FROM sample32 ORDER BY a, b;

/**************************************************
* 정렬방법 지정하기
* a열은 오름차순 b열은 내림차순
**************************************************/
SELECT * FROM sample32 ORDER BY a ASC, b DESC;

/**************************************************
* NULL 값의 정렬순서
* NULL에 대한 대소비교는 표준SQL에도 정해지지 않음
* 특정값보다 큰값 / 작은값으로 취급
* 제품별로 상이함
* MySql의 경우 NULL을 가장 작은 값으로 취급
* ASC는 가장 앞에 / DESC는 가장 뒤에
**************************************************/

/**************************************************
* 결과 행 제한하기 - LIMIT
* LIMIT 구
* SELECT 열명 FROM 테이블명 LIMIT 행수 [OFFSET 시작행]
**************************************************/

/**************************************************
* 행수 제한
* LIMIT 구는 표준 SQL은 아님(mysql, postgresql)
* 반환될 행수를 제한할수 있다.
* LIMIT는 WHERE -> ORDER BY -> LIMIT 순으로 작동하므로
* 조건과 정렬 후 제한이 가능하다.
**************************************************/
SELECT * FROM sample33 LIMIT 3;

/**************************************************
* LIMIT를 사용할 수 없는 데이터베이스에서의 행 제한
* SQL Server
* SELECT TOP 3 * FROM sample33;
* Oracle
* SELECT * FROM sample33 WHERE ROWNUMBER <= 3;
* Oracle은 where 절에서 지정하므로 LIMIT과는 다른 결과
**************************************************/

/**************************************************
* 오프셋 지정
* 0번 부터 3개 보기
* 3번 부터 3개 보기
* 페이징 구현 가능
**************************************************/
SELECT * FROM sample33 LIMIT 3 OFFSET 0;
SELECT * FROM sample33 LIMIT 3 OFFSET 3;

/**************************************************
* 수치 연산
* 산술 연산
* + - * / % MOD
**************************************************/

/**************************************************
* 사칙 연산
* 우선순위
* 1 : * / %
* 2 : + -
* 연산자가 섞여 있을 경우 우선순위대로 계산됨
**************************************************/

/**************************************************
* SELECT 구로 연산하기
**************************************************/
SELECT *, price * quantity FROM sample34;

/**************************************************
* 열의 별명
* 위의 경우처럼 연산식의 경우 열이름이 연산식으로 나오므로
* 별명을 이용해 식별에 용이하게 변경한다
* 아래와 같이 작성하면 연산식 대신 amount가 열명으로 나온다
* 한글도 가능하지만 ASCII 문자 이외는 ""로 감싸서 작성한다
* 별명을 지정할때 예약어 숫자를 사용할때 역시 ""로 감싸야하며
  숫자로 시작되어선 안된다.
* 표준 SQL에 정의됨.
**************************************************/
SELECT *, price * quantity AS amount FROM sample34;

/**************************************************
* WHERE 구에서 연산하기
* WHERE 구에서 연산하고 2000원 이상인 행 검색
* 지정한 별칭을 WHERE절에서 사용 불가능한 이유
**************************************************/
SELECT *, price * quantity as amount from sample34 WHERE price * quantity >= 2000;

/**************************************************
* 작업 순서가 WHERE -> SELECT로 진행되므로
* 별칭이 지정되지 않았기 때문에 에러 발생
**************************************************/

/**************************************************
* NULL값의 연산
* SQL에서 NULL과의 연산은 NULL로 처리된다.
**************************************************/

/**************************************************
* ORDER BY 구에서 연산하기
* ORDER BY 구에서 금액을 계산하고 내림차순으로 정렬하기
**************************************************/
SELECT *, price * quantity as amount FROM sample34 ORDER BY price * quantity DESC;

/**************************************************
* ORDER BY 구에서 별명을 사용해 정렬하기
* 별명은 WHERE 절에선 사용할수 없지만 ORDER BY 절에서는
* 사용가능하다.
* WHERE -> SELECT -> ORDER BY 순서로 실행되기 때문에
**************************************************/
SELECT *, price * quantity as amount FROM sample34 ORDER BY amount DESC;

/**************************************************
* 함수
* 10 % 3 = 1
* MOD(10,3) = 1
* 연산자를 사용해도 함수를 사용해도 같은 결과가 나온다.
**************************************************/

/**************************************************
* ROUND 함수(반올림)
**************************************************/
SELECT amount, ROUND(amount) FROM sample34;

/**************************************************
* ROUND 함수(반올림)
* 반올림 할 소수점 자리 지정하기
* 625.25
* 생략하면 0 = 정수로 떨어지고
* 625
* 입력한 자리수까지 보여준다
* 625.3
**************************************************/
SELECT amount, ROUND(amount,1) FROM sample34;

/**************************************************
* ROUND 함수(반올림)
* 자리수를 음수로 지정하면 정수부분 반올림이 된다
* 5961.60
* -2를 지정하면 6000
**************************************************/
SELECT amount, ROUND(amount, -2) FROM sample34;