전자정부프레임워크
  2. 개발환경 구성하기
    - 지원 범위 : 개발, 테스트, 빌드, 형상관리를 포함한 전체 개발 주기
    2.1. 개발환경 구성
      - 구현도구, 테스트도구, 형상/변경관리 도구, 배포도구

        개발흐름
        개발자 개발환경에서 소스코드작성, 컴파일, 테스트 후 실행 가능한 형태로 빌드
        개인별 소스코드는 형상관리 시스템에 통합 저장
        형상관리 시스템에 자신의 소스코드를 반영 혹은 타인의 소스코드를 통합하는 공동작업 형태로 개발을 진행
        배포도구는 형상관리 시스템에서 소스코드를 불러와 통합 빌드
        서버에서 실행 가능한 형태로 구조화하여 배포

        개발환경 주요 오픈소스
        ==========================================================
        |        구분         |               설명               |
        | 구현도구            | Eclipse, PMD, Maven(빌드)        |
        | 테스트도구          | JUnit, EasyMock, DbUnit, EclEmma |
        | 형상/변경관리  도구 | Subversion, jTrac                |
        | 배포도구            | Hudson, Nexus, Maven             |
        ==========================================================
        Eclipse    : 자바소스코드 편집, 컴파일, 테스트, 실행을 지원하는 개발도구
        PMD        : Eclipse의 플러그인 룰셋 기반으로 소스코드 오류 검사
        Maven      : 소스코드 컴파일에 필요한 라이브러리 관리와 컴파일, 테스트, 빌드 작업 지원
        Junit      : 단위테스트 코드 작성지원
        EasyMock   : 웹 어플리케이션 없이 테스트 할수 있도록 테스트 환경 지원
        DBunit     : DB에 테스트 데이터 생성 및 검증값과 같은지 비교하는 환경 지원
        EclEmma    : 단위테스트가 수행된 부분을 퍼센트 형태로 알려주는 커버리지 테스트 지원
        SubVersion : 형상관리도구 소스코드통합, 버전관리 지원
        jTrac      : 변경관리 이력 추적
        Hudson     : 테스트와 통합을 지원하는 CI(Continuous Intergration) 도구
          * CI : 지속적인 통합 / 초기의 코드와 작성중 변경된 코드를 통합할때 시간간격이 벌어질수록 통합이 어려워져서 처음부터 작성하게 될수도 있는 상황을 방지하기 위해 "초기부터 자주" 통합하는 것
        Nexus : Maven 라이브러리를 3rd 파티로 제공할 때 활용

    2.2. 개발환경 설치 및 구성
      3가지 방법
      1. 표준프레임워크 홈페이지 -> 교육교재 활용
         모든 구성이 완료된 상태
         링크 : https://www.egovframe.go.kr/cop/bbs/selectBoardArticle.do?nttId=1321&bbsId=BBSMSTR_000000000004&menu=4
      2. 표준프레임워크 개발환경 다운로드 후 JDK, TOMCAT 설치
          eclipse 디렉터리안에 eclipse.ini에 설치된 JDK 정보(-vm JDK설치경로\bin\javaw.exe)를 다음과 같이 추가한다.
         링크 :https://www.egovframe.go.kr/EgovDevEnvRelease_300.jsp?menu=3&submenu=2&leftsub=2#
      3. 기존의 Eclipse에 표준프레임워크 플러그인 추가

  3. 개발자 개발환경 활용
    - 표준프레임워크 개발자 개발도구는 구현 도구인 Eclipse를 활용하여 개발 Maven을 활용하여 라이브러리 관리 및 빌드를 수행한다.

    3.1. 구현도구 활용
      메뉴바의 메뉴중 eGovFrame에서 프로젝트 생성 및 관련 파일과 기능을 사용할수있다.
      예제 프로젝트 생성
      메뉴바의 egovFrame 버튼 클릭 -> Start -> new web project를 클릭한후 프로젝트명, 그룹아이디를 입력 후 Next 버튼을 클릭하고 Generate Example을 체크해야 샘플 프로젝트가 생성된다. 프로젝트가 생성되면 Run As -> Maven install을 선택해 프로젝트를 빌드한다.
      * jdk가 1.7이 아니면 오류가 발생하는데 샘플이 1.7에 맞춰져 있으므로 프로젝트를 오른쪽 클릭 후 Properties를 선택하고 Java Compiler를 사용중인 JDK로 맞춰주면 오류 해결
      Run As -> Run on server를 선택하면 정상 실행된다.

      라이브러리 관리
        - Build Path -> Configure Build Path 안의 Libraries탭에서 라이브러리 추가 수정 삭제가 가능하다.
        - 프로젝트의 모든 라이브러리를 build path에 개별등록을 하게 되면 불편하기 때문에 Maven은 의존성 설정을 활용하여 관리하는 방법을 제공한다.
          firstexample 프로젝트의 라이브러리는 43개이고 pom.xml에 설정된 dependency는 9개 이다.
          나머지 라이브러리는 egovframework.rte.ptl.mvc에서 참조하는 라이브러리를 함께 이용한다.
          egovframework.rte.ptl.mvc와 egovframework.rte.psl.dataacess가 최상위로 이 둘에게 종속성을 가진 하위 라이브러리들이 모두 추가되는 형식으로 추정된다.

          라이브러리 설정 방법
          <dependency>
            <groupId>egovframework.rte</groupId>  라이브러리 식별 namespace
            <artifactId>egovframework.rte.ptl.mvc</artifactId>  라이브러리 명
            <version>${egovframework.rte.version}</version>  버전정보
            <exclusions>  옵션이며, 충돌 등의 이유로 특정 라이브러리 의존성 제거
              <exclusion>
                <artifactId>commons-logging</artifactId>
                <groupId>commons-logging</groupId>
              </exclusion>
            </exclusions>
          </dependency>

          처음 Maven 실행시 local repository(사용자 디렉터리 밑에 .m2\repository)에 라이브러리가 없다면
          http://repo1.maven.org/maven2/ 와 http://www.egovframe.go.kr/maven/에서 라이브러리를
          다운(원격저장소)받으며 내부망의 경우는 추가로 세팅이 필요하다.
      3.2.2. 빌드 관리
        - Maven에서는 디렉토리 구조 정규화를 통해 컴파일과 패키징을 쉽게 수행 가능하다.
        디렉토리 구조
        firstExample
          >src/main/java  : 자바 소스파일
          >src/main/resource  : 배포할 리소스, sml, properties
          >src/main/java
          >src/main/resource
          >maven dependencies
          >jre system library
          >src
            >main
              >webapp  : 웹 어플리케이션 리소스(html, js 등)
            >test
          >target  : build된 output 위치
          pom.xml  :프로젝트 객체 모델, 빌드 의존성 등 정보를 가짐

          실제 소스와 테스트 소스로 나뉘며 resuource 디렉토리에는 jar/war로 패키징될때 함께 배포되어야할 설정파일등의 리소스가 있다.
          웹프로젝트의 경우 webapp 밑에 MVC 설정과 웹리소스(HTML, JS, 이미지등)이 있다.

          Maven 빌드 생명주기
          validate -> generate-sources -> compile -> test -> package -> install -> deploy
          현재설정과 pom.xml의 내용의 유효성 확인
          플러그인 소스코드 추가가 필요하면 실행
          소스코드 컴파일 컴파일된 클래스는 타겟디렉토리에 저장됨
          테스트케이스 실행
          바이너리 파일을 jar / war로 변환
          압축된 패키지를 로컬 메이븐 저장소에 추가
          압축파일을 원격 메이븐 저장소에 추가

          대체로 인스톨로 실행하고 생명주기 앞부분도 같이 실행됨
      3.2.3. Maven 설정
        - Maven 프로젝트는 빌드 되어 로컬 또는 원격 Repository 에 배포될 수 있기 때문에 자체적으로 Group Id, Artifact Id, 버전 정보와
          pom.xml에 프로젝트의 정보, 의존성, 빌드 세팅(플러그인) 정보를 포함하고 있다.
          pom.xml은 artifact / dependencies / plugins로 크게 구분됨

          Maven 은 빌드 작업시에 생명주기 단계별로 플러그인을 바인딩하여 작업을 처리함
          플러그인의 설정은 pom.xml 에서 pluginManagement 에 기술되고 주요 Maven 플러그인 정보는

          ==========================================================================
          |  단계  |        plugin         |                설명                   |
          ==========================================================================
          |compile | maven-compiler-plugin | 소스코드 컴파일                       |
          ==========================================================================
          |test    | maven-test-plugin     | 단위테스트 (Junit) 실행과 리포트 생성 |
          |        | maven-surefire-plugin |                                       |
          ==========================================================================
          |package | maven-jar-plugin      |                                       |
          |        | maven-war-plugin      | 압축파일 생성                         |
          ==========================================================================
          |emma    | maven-emma-plugin     | Code coverage report 생성             |
          ==========================================================================

          Maven install로 빌드를 수행하면 compile, test, package, install의 순서로 실행
          compile 에서 resources 플러그인이 실행되어 소스코드가 copy 되고 compiler 플러그인이 동작하여 컴파일.
          Test단계에서 test 플러그인이 실행되어 단위테스트를 수행하고, surefire 플러그인이 테스트결과 리포트를 생성.
          Package 단계에서 war 플러그인이 동작되어 war 배포파일이 생성.
          Install단계에서 로컬 Repository에 배포되게 된다.
          
  4. 서버 개발환경 활용
    Subversion과 Jenkins
    
    4.1. 형상관리 도구 활용
      4.1.1. Subversion 개요 및 설치
        visualsvn 설명 생략
      
      4.1.2. Revisions
        전체 리비전과 파일별 리비전으로 나눔
      
      4.1.3. Eclipse와 연동
        최초 커밋으로 SVN 연동 후 check out으로 저장소의 파일을 받아오고
        commit(엽로드)과 update(다운로드)로 버전을 관리해 나간다.
    
    4.2. 배포 도구 활용
      4.2.1. CI(Continuous Intergration) 개요 및 설치
        - 일반적인 프로젝트의 가장 큰 위험 요소는 에러, 미개발, 요구사항 미 충족등이 오픈직전에 발견되는것
          이러한 문제를 해결하려는 개념이 CI 상시적으로 통합과 테스트를 수행하는 개념
        - 형상관리 서버에서 통합된 소스코드를 CI에서 check out 하여 자동으로 테스트 빌드수행
        - Hubson과 Jenkins의 기능이 거의 일치하고 Hudson의 업데이트가 비정기적인 이유로 Jenkins로 설명 진행
          Jenkins 압축파일을 다운로드 받아서 tomcat등의 WAS의 webapp 밑에 압축을 풀면 설치 완료
          그후 톰캣을 실행하고 http://localhost:8080/jenkins에 접속하여 세팅을 해주면 된다.
          42쪽까지 진행~