표준프레임워크
  1. 어플리케이션 환경의 변화
     메인프레임 -> C/S -> WEB으로 변화
     메인프레임 : 관리 배포 편리 / 비싼 서버, 개발비용, 저수준 사용자 인터페이스 타시스템 호환문제
     C/S : 저렴한 서버, 구축비용(전세대 단점 극복), 개선된 개발환경, 고수준 사용자 인터페이스 / 어플리케이션 배포, 관리의 어려움 호환문제 확장성 문제
     WEB : 전세대의 단점이 거의 해결 관리 배포 용이, 고수준 사용자 인터페이스, 쉽고 표준화된 개발환경, 호환용이, 확장용이, 재활용성 향상, 유지보수 용이
  2. 프레임워크 등장배경
     소프트웨어 패러다임의 변화(재사용성 극대화에 초점)
     하드웨어 중심 -> 프로그래밍 언어의 범람 -> 객체지향 중심 -> 컴포넌트 기반 -> 프레임워크 기반 으로 변화
     하드웨어 중심 : 쉬우면서 유지보수가 용이한 언어와 환경이 요구됨
     프로그래밍 언어의 범람 : 절차지향 프로그래밍의 복잡성과 통합의 어려움을 해결할 방식이 요구됨
     객체지향 중심 : 소프트웨어의 수요는 늘었지만 생산성은 떨어짐 재사용성이 떨어지는 모듈화 방식 효율성 요구
     컴포넌트 기반 : 컴포넌트로 재사용이 가능하지만 개별로 관리하고 사용하는것은 어려움

     재사용 방식의 발전
     소스 재사용 -> 재사용 메소드 -> 재사용 객체 -> 디자인 패턴 -> 프레임워크
     소스 재사용 : 초보적 방식 과거코드에서 비슷한 부분을 찾아서 사용 / 원본과 적용본을 모두 수정해야함
     재사용 메소드 : 자주 사용하는 기능을 라이브러리로 만들어서 사용 / 같은 영역안에서의 사용은 유용하나 다른 영역에서 라이브러리를 사용한다면 유지보수시에 복잡성이 증가
     재사용 객체 : 객체지향언어의 방식 클래스를 이용한 재사용(상속) / 구조적으로 수직적인 재사용이 유용하나 상황에 따른 접근방식의 부재
     디자인 패턴 : 재사용 객체가 수직적인 재사용을 위한 방법이라면 디자인 패턴은 상황에 따른 문제를 해결하는 재사용 방법(재사용 객체의 문제점 보완) 재사용 클래스를 재사용하는 방법 / 부분적인 문제를 해결하는 방법
     프레임워크 : 하나의 문제 상황을 해결하는 디자인패턴들이 모여 전체 구성을 고민하는것이 프레임워크

  1. SW프레임워크 개념
     SW프레임워크 정의
     문제 해결을 위한 추상화된 디자인을 구현한 클래스들의 집합
     아키텍쳐와 디자인 패턴의 집합
     재사용 가능한 API 집합
     반제품 성격
     애플리케이션의 틀과 구조를 결정하고 개발자의 코드를 제어

     시스템안에서
     어플리케이션 : 개발프레임워크에서 제공하는 디자인 및 소스코드를 이용하여 개발됨
     개발프레임워크 : 어플리케이션을 구성하는 기반구조, 반복적으로 사용되는 디자인과 기반소스코드의 정의
     기반S/W : 어플리케이션 동작에 필요한 S/W
     프레임워크 VS 컴포넌트
     목적 : 재사용, 이식성, 확장성 / 재사용, 이식성
     계층구조 : 어플리케이션종속, 다중 계층구조, 복잡함 / 단일계층구조, 독립적임
     내부구조 : 내부를 드러내고 다양한 구조에 대한 모델을 제공 / 내부를 감춤
     구성요소 : 컴포넌트, 객체로 구성가능 / 객체로 구성
     기본원칙 : 확장이 원칙 / 사용과 배치가 편리함이 원칙
     적용 : 다양한 어플리케이션의 형태로 존재 / ejb, .net등의 표준환경을 가짐
     기능 : 어플리케이션 개발 하부구조 제공 / 구체적 로직과 알고리즘 구현 제공

     프레임워크는 골격이라고 볼수 있는데 비표준 프레임워크로 인해 호환성이 저하되고 독점현상이 생김

     프레임워크 개발 방식은 개발자가 비지니스 로직에만 집중할수 있게 한다.

     표준프레임워크의 표준기준
     개방표준, 특정사업자 종속성 배제, 오픈소스 기술 수용

     